% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/stad.R
\name{stad}
\alias{stad}
\title{STAD algorithm}
\usage{
stad(distance_matrix, filter_values = NULL, num_intervals = NULL,
  metric = NULL, penalty = 0, random_factor = 10000,
  iterations_inner_loop = 10, two_mst = FALSE, ratio = TRUE)
}
\arguments{
\item{distance_matrix}{dist object containing a distance matrix.}

\item{filter_values}{numeric array or two-dimensional data.frame with the lenses to use in STAD.}

\item{num_intervals}{number or array defining the number of intervals to consider in the filters.}

\item{metric}{string or array defining the metrics supported ("polar" or "euclidean").}

\item{penalty}{numeric penalty value used during the optimization loop. It limits the number of iterations. Default = 0. We recommend to set a penalty = 0.001 or lower.}

\item{random_factor}{integer factor that controls the variability of the next iteration on the optimization algorithm. Default = 10000. Higher values generates more diverse exploration.}

\item{iterations_inner_loop}{integer number of evaluations for each iteration. The number of iterations allows knowing the close values around but increase the total number of iterations.}

\item{two_mst}{boolean indicating if the MST is build using the two-step MST. It only applies when \code{filter_values} are defined.}

\item{ratio}{boolean Enable STAD-R. Default = TRUE.}
}
\value{
Returns a \code{stad} class (or \code{list}) with the following items:
\itemize{
\item graph
\item number_edges
\item trace
\item ordered_distances
}
}
\description{
The function computes STAD with a given distance matrix and/or filter values.
}
\examples{
# Iris dataset
data(iris)
iris_distance <- dist(iris[,1:4])
iris_stad <- stad(iris_distance)
plot_graph(iris_stad)
plot_trace(iris_stad)

# Circles dataset
 data(circles)

library(ggplot2)

ggplot(circles, aes(x,y, color = lens)) +
  geom_point()

circles_distance <- dist(circles[,c("x", "y")])

## STAD without lens
set.seed(10)
circles_nolens <- stad(circles_distance)
plot_graph(circles_nolens, layout = igraph::layout_with_kk )

## STAD with lens
set.seed(10)
circles_lens <- stad(circles_distance, filter_values = circles$lens, num_intervals = 5)
plot_graph(circles_lens, layout = igraph::layout_with_kk )

}
